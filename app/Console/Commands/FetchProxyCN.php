<?php

namespace App\Console\Commands;

use App\Helpers\ProxyHelper;
use Illuminate\Console\Command;

class FetchProxyCN extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'proxy:fetch-cn {--days=1}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $daysToRun = (int) $this->option('days'); // S·ªë ng√†y ch·∫°y
        if ($daysToRun < 1) {
            $this->error("‚ùå B·∫°n ph·∫£i nh·∫≠p s·ªë ng√†y >= 1.");
            return 1;
        }

        $this->info("üîç B·∫Øt ƒë·∫ßu ch·∫°y li√™n t·ª•c trong {$daysToRun} ng√†y ƒë·ªÉ thu th·∫≠p proxy...");
        $this->newLine();

        $proxies = [];
        $stt = 0;

        // Load danh s√°ch blacklist
        $skipKeys = [];
        $skipFile = storage_path('app/banned_proxies.txt');
        if (file_exists($skipFile)) {
            $skipLines = file($skipFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            foreach ($skipLines as $line) {
                $parts = explode(':', $line);
                if (count($parts) >= 2) {
                    $skipKeys["{$parts[0]}:{$parts[1]}"] = true;
                }
            }
        }

        // Th·ªùi gian b·∫Øt ƒë·∫ßu
        $startTime = time();
        $endTime = $startTime + ($daysToRun * 86400); // 86400 gi√¢y = 1 ng√†y

        while (true) {
            // Ki·ªÉm tra h·∫øt th·ªùi gian ch∆∞a
            if (time() >= $endTime) {
                $this->info("‚è∞ ƒê√£ h·∫øt th·ªùi gian ch·∫°y {$daysToRun} ng√†y.");
                break;
            }

            $stt++;
            $result = ProxyHelper::fetchAndCheckProxy();

            if ($result['status'] === 'success') {
                $proxy = $result['proxy'];
                $key = "{$proxy['ip']}:{$proxy['port']}";

                if (isset($skipKeys[$key])) {
                    $this->warn("‚õî Proxy n·∫±m trong blacklist: {$key}");
                } elseif (!isset($proxies[$key])) {
                    // Test proxy
                    $check = $this->testProxy($proxy['ip'], $proxy['port'], $proxy['user'], $proxy['pass']);

                    if ($check['alive']) {
                        $proxyLine = "{$proxy['ip']}:{$proxy['port']}:{$proxy['user']}:{$proxy['pass']}";
                        $proxies[$key] = $proxyLine;

                        // ‚úÖ L∆∞u ngay v√†o checklist
                        file_put_contents(
                            storage_path('app/checklist_proxies.txt'),
                            $proxyLine . PHP_EOL,
                            FILE_APPEND
                        );

                        $this->line("‚úÖ Proxy OK: {$key} (STT {$stt})");
                    } else {
                        $this->warn("‚ùå Proxy kh√¥ng ho·∫°t ƒë·ªông: {$key}");
                    }

                    // N·∫øu ƒë√£ ƒë·ªß 100 proxy th√¨ l∆∞u ngay
                    if (count($proxies) >= 100) {
                        $lines = array_values($proxies);
                        file_put_contents(storage_path('app/proxies_fast.txt'), implode(PHP_EOL, $lines) . PHP_EOL, FILE_APPEND);

                        $this->info("üíæ ƒê√£ l∆∞u 100 proxy v√†o file. Ti·∫øp t·ª•c thu th·∫≠p...");
                        $proxies = []; // X√≥a proxy ƒë√£ l∆∞u ƒë·ªÉ thu th·∫≠p ti·∫øp
                    }
                } else {
                    $this->line("‚ö†Ô∏è Proxy ƒë√£ thu th·∫≠p trong phi√™n n√†y: {$key}");
                }
            }

            usleep(100000); // Delay 0.1s
        }

        // N·∫øu c√≤n proxy ch∆∞a ƒë·ªß 100, l∆∞u n·ªët
        if (!empty($proxies)) {
            $lines = array_values($proxies);
            file_put_contents(storage_path('app/proxies_fast.txt'), implode(PHP_EOL, $lines) . PHP_EOL, FILE_APPEND);

            $this->info("üíæ ƒê√£ l∆∞u " . count($proxies) . " proxy c√≤n l·∫°i.");
        }

        $this->info("üéâ Ho√†n th√†nh qu√° tr√¨nh thu th·∫≠p proxy.");
        return 0;
    }


    private function testProxy($ip, $port, $user, $pass)
    {
        $url = "https://example.com";
        $start = microtime(true);

        $ch = curl_init();
        curl_setopt_array($ch, [
            CURLOPT_URL => $url,
            CURLOPT_PROXY => "{$ip}:{$port}",
            CURLOPT_PROXYUSERPWD => "{$user}:{$pass}",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_TIMEOUT => 10,
            CURLOPT_NOBODY => true,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_SSL_VERIFYHOST => false,
        ]);

        curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);

        return [
            'alive' => $httpCode === 200,
        ];
    }




}
